tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
})
matched
t(matched)
str(t(matched))
return(t(tmp))
matched <- sapply(1:nrow(target_data), function(i){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(t(tmp))
})
matched
target_data
matched <- sapply(1:nrow(target_data), function(i){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
})
matched <- apply(target_data, 1, function(i){
# tmp is the matched point
tmp <- internal_dist(fx_pt = fx,
dx_pt = dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
})
apply(target_data, 1, print)
matched <- apply(target_data, 1, function(i){
# tmp is the matched point
tmp <- internal_dist(fx_pt = i$fx,
dx_pt = i$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
})
apply(target_data[1:2,], 1, print)
apply(target_data[1:2,], 1, function(x){return(x)})
apply(target_data[1:2,], 1, function(x){return(x)}) -> x
x
x[,1]
x[,1]$fx
x["fx",1]
matched <- apply(target_data, 1, function(row){
# tmp is the matched point
tmp <- internal_dist(fx_pt = as.numeric(row["fx"]),
dx_pt = as.numeric(row["dx"]),
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
})
matched
matched %>% do.call(rbind, .)
matched
apply(target_data, 1, function(row){
# tmp is the matched point
tmp <- internal_dist(fx_pt = as.numeric(row["fx"]),
dx_pt = as.numeric(row["dx"]),
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
}) %>%
do.call(rbind,.) ->
matched
matched
matched1
archive_data <- archive_subset
apply(target_data, 1, function(row){
# tmp is the matched point
tmp <- internal_dist(fx_pt = as.numeric(row["fx"]),
dx_pt = as.numeric(row["dx"]),
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
}) %>%
do.call(rbind,.) ->
matched
matched
matched1
for(i in 1:nrow(target_data)){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
matched1 <- rbind(matched1, tmp)
rm(tmp)
rm(rm_from_archive)
}
matched
matched
matched1
which(matched != matched1)
dim(matched)
dim(matched1)
matched1 <- data.frame()
for(i in 1:nrow(target_data)){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
matched1 <- rbind(matched1, tmp)
rm(tmp)
rm(rm_from_archive)
}
which(matched != matched1)
head(matched)
head(matched1)
archive_data
archive_data <- archive_subset
apply(target_data, 1, function(row){
# tmp is the matched point
tmp <- internal_dist(fx_pt = as.numeric(row["fx"]),
dx_pt = as.numeric(row["dx"]),
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
return(tmp)
}) %>%
do.call(rbind,.) ->
matched
archive_subset
archive_data
tail(matched)
new_matcher <- function(target_data, archive_data){
# Check the inputs of the functions
req_cols <- c("experiment", "variable", "ensemble", "start_yr", "end_yr", "fx", "dx")
assert_that(has_name(which = req_cols, x = archive_data))
req_cols <- c("start_yr", "end_yr", "fx", "dx")
assert_that(has_name(which = req_cols, x = target_data))
# shufflle the the archive data
archive_data <- shuffle_function(archive_data)
# the literal ugliest way possible. Can't even do an apply because
# that won't let us update the archive after we match each row.
# it's not Terrible because the target_data only has 28-50ish rows
# (depending on the window size that the chunking was done for).
matched <- data.frame()
for(i in 1:nrow(target_data)){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
matched <- rbind(matched, tmp)
rm(tmp)
rm(rm_from_archive)
}
# Now add the information about the matches to the target data
# Make sure it if clear which columns contain  data that comes from the target compared
# to which ones correspond to the archive information. Right now there are lots of columns
# that contain duplicate information for now it is probably fine to be moving these things around.
names(target_data) <- paste0('target_', names(target_data))
out <- cbind(target_data, matched)
# Return the data frame of target values matched with the archive values with the distance.
return(out)
}
matched_no_dup <- new_matcher(target_data = target_data, archive_data = archive_subset)
source('~/.active-rstudio-document', echo=TRUE)
matched
matched_no_dup
# make sure no duplicates:
matched_no_dup %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(n() > 1) %>%
ungroup ->
duplicates
duplicates
archive_data %>%
dplyr::filter(model == unique(target_data$model)) %>%
dplyr::filter(experiment == 'ssp126' | experiment == 'ssp585') ->
archive_subset
matched_points1 <- new_matcher(target_data = target_data, archive_data = archive_subset)
matched_points2 <- new_matcher(target_data = target_data2, archive_data = archive_subset)
matched_points1
# required packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
# The load the functions we will want to use, these are currently written in R and will be translated into python.
source("nearest_neighbor_matching.R") # the function match_nearest_neighbor is defined here
source("stitching_functions.R")  # the function stitch_global_mean is definend here
source('~/.active-rstudio-document', echo=TRUE)
matched
new_matcher <- function(target_data, archive_data){
# Check the inputs of the functions
req_cols <- c("experiment", "variable", "ensemble", "start_yr", "end_yr", "fx", "dx")
assert_that(has_name(which = req_cols, x = archive_data))
req_cols <- c("start_yr", "end_yr", "fx", "dx")
assert_that(has_name(which = req_cols, x = target_data))
# shufflle the the archive data
archive_data <- shuffle_function(archive_data)
# the literal ugliest way possible. Can't even do an apply because
# that won't let us update the archive after we match each row.
# it's not Terrible because the target_data only has 28-50ish rows
# (depending on the window size that the chunking was done for).
matched <- data.frame()
for(i in 1:nrow(target_data)){
# tmp is the matched point
tmp <- internal_dist(fx_pt = target_data[i,]$fx,
dx_pt = target_data[i,]$dx,
archivedata = archive_data)
# update the archive so that dropped point is dropped
rm_from_archive <- tmp[, grepl('archive_', names(tmp))]
names(rm_from_archive) <- gsub(pattern = 'archive_',
replacement = '',
x = names(rm_from_archive))
archive_data %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
archive_data
matched <- rbind(matched, tmp)
rm(tmp)
rm(rm_from_archive)
}
# Now add the information about the matches to the target data
# Make sure it if clear which columns contain  data that comes from the target compared
# to which ones correspond to the archive information. Right now there are lots of columns
# that contain duplicate information for now it is probably fine to be moving these things around.
names(target_data) <- paste0('target_', names(target_data))
out <- cbind(target_data, matched)
# Return the data frame of target values matched with the archive values with the distance.
return(out)
}
matched_no_dup <- new_matcher(target_data = target_data, archive_data = archive_subset)
source('~/.active-rstudio-document', echo=TRUE)
matched
break
source('~/.active-rstudio-document', echo=TRUE)
matched_data <- matched
matched_data %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(n() > 1) %>%
ungroup ->
duplicates
duplicates
duplicates %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(dist_l2 == min(dist_l2)) %>%
ungroup ->
duplicates_min
# target points of duplicates-duplicates_min need to be
# refit on the archive - matched points
duplicates[, grepl('target_', names(duplicates))  ] %>%
filter(!(target_year %in% duplicates_min$target_year)) ->
points_to_rematch
names(points_to_rematch) <- gsub(pattern = 'target_', replacement = '', x = names(points_to_rematch))
rm_from_archive <- matched_data[, grepl('archive_', names(matched_data))]
names(rm_from_archive) <- gsub(pattern = 'archive_', replacement = '', x = names(rm_from_archive))
archive_subset %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
new_archive
rematched <- match_nearest_neighbor(target_data = points_to_rematch,
archive_data = new_archive)
rematched
matched_data %>%
filter(!(target_year %in% rematched$target_year))
atched_data %>%
filter(!(target_year %in% rematched$target_year)) %>%
bind_rows(rematched) %>%
arrange(target_year) ->
matched_data
matched_data %>%
filter(!(target_year %in% rematched$target_year)) %>%
bind_rows(rematched) %>%
arrange(target_year) ->
matched_data
matched_data  %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(n() > 1) %>%
ungroup ->
duplicates
duplicates
duplicates
kable(duplicates)
# What a 'remove duplicates' helper_function might look like:
remove_duplicates <- function(matched_data){
# Work with rows where the same archive match gets brought in
matched_data %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(n() > 1) %>%
ungroup ->
duplicates
while(nrow(duplicates > 0)){
# within each set of duplicates,
# pull out the one with smallest dist_l2 -
# this is the one that gets to keep the match, and we use
# as an index to work on the complement of (in case the same
# archive point gets matched for more than 2 target years)
duplicates %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(dist_l2 == min(dist_l2)) %>%
ungroup ->
duplicates_min
# target points of duplicates-duplicates_min need to be
# refit on the archive - matched points
duplicates[, grepl('target_', names(duplicates))  ] %>%
filter(!(target_year %in% duplicates_min$target_year)) ->
points_to_rematch
names(points_to_rematch) <- gsub(pattern = 'target_', replacement = '', x = names(points_to_rematch))
rm_from_archive <- matched_data[, grepl('archive_', names(matched_data))]
names(rm_from_archive) <- gsub(pattern = 'archive_', replacement = '', x = names(rm_from_archive))
archive_subset %>%
anti_join(rm_from_archive,
by=c("experiment", "variable",
"model", "ensemble",
"start_yr", "end_yr", "year",
"fx", "dx")) ->
new_archive
rematched <- match_nearest_neighbor(target_data = points_to_rematch,
archive_data = new_archive)
matched_data %>%
filter(!(target_year %in% rematched$target_year)) %>%
bind_rows(rematched) %>%
arrange(target_year) ->
matched_data
matched_data  %>%
group_by(archive_experiment, archive_variable,
archive_model, archive_ensemble,
archive_start_yr, archive_end_yr, archive_year,
archive_fx, archive_dx) %>%
filter(n() > 1) %>%
ungroup ->
duplicates
# cleanup for next loop
rm(duplicates_min)
rm(points_to_rematch)
rm(rm_from_archive)
rm(new_archive)
rm(rematched)
}
return(matched_data)
}
matched3 <- removed_duplicates(matched)
source('~/.active-rstudio-document', echo=TRUE)
duplicates
source('~/.active-rstudio-document', echo=TRUE)
matched3
# data that will for sure have the same value getting matched in multiple times
archive_data %>%
dplyr::filter(model == unique(target_data$model)) %>%
dplyr::filter(experiment == 'ssp126' | experiment == 'ssp585') %>%
filter(ensemble == 'r1i1p1f1' | ensemble == 'r2i1p1f1') ->
archive_subset
source('~/.active-rstudio-document', echo=TRUE)
tail(matched_no_dup)
